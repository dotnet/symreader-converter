<?xml version="1.0" encoding="utf-8"?>
<root>
  <!-- 
    Microsoft ResX Schema 
    
    Version 2.0
    
    The primary goals of this format is to allow a simple XML format 
    that is mostly human readable. The generation and parsing of the 
    various data types are done through the TypeConverter classes 
    associated with the data types.
    
    Example:
    
    ... ado.net/XML headers & schema ...
    <resheader name="resmimetype">text/microsoft-resx</resheader>
    <resheader name="version">2.0</resheader>
    <resheader name="reader">System.Resources.ResXResourceReader, System.Windows.Forms, ...</resheader>
    <resheader name="writer">System.Resources.ResXResourceWriter, System.Windows.Forms, ...</resheader>
    <data name="Name1"><value>this is my long string</value><comment>this is a comment</comment></data>
    <data name="Color1" type="System.Drawing.Color, System.Drawing">Blue</data>
    <data name="Bitmap1" mimetype="application/x-microsoft.net.object.binary.base64">
        <value>[base64 mime encoded serialized .NET Framework object]</value>
    </data>
    <data name="Icon1" type="System.Drawing.Icon, System.Drawing" mimetype="application/x-microsoft.net.object.bytearray.base64">
        <value>[base64 mime encoded string representing a byte array form of the .NET Framework object]</value>
        <comment>This is a comment</comment>
    </data>
                
    There are any number of "resheader" rows that contain simple 
    name/value pairs.
    
    Each data row contains a name, and value. The row also contains a 
    type or mimetype. Type corresponds to a .NET class that support 
    text/value conversion through the TypeConverter architecture. 
    Classes that don't support this are serialized and stored with the 
    mimetype set.
    
    The mimetype is used for serialized objects, and tells the 
    ResXResourceReader how to depersist the object. This is currently not 
    extensible. For a given mimetype the value must be set accordingly:
    
    Note - application/x-microsoft.net.object.binary.base64 is the format 
    that the ResXResourceWriter will generate, however the reader can 
    read any of the formats listed below.
    
    mimetype: application/x-microsoft.net.object.binary.base64
    value   : The object must be serialized with 
            : System.Runtime.Serialization.Formatters.Binary.BinaryFormatter
            : and then encoded with base64 encoding.
    
    mimetype: application/x-microsoft.net.object.soap.base64
    value   : The object must be serialized with 
            : System.Runtime.Serialization.Formatters.Soap.SoapFormatter
            : and then encoded with base64 encoding.

    mimetype: application/x-microsoft.net.object.bytearray.base64
    value   : The object must be serialized into a byte array 
            : using a System.ComponentModel.TypeConverter
            : and then encoded with base64 encoding.
    -->
  <xsd:schema id="root" xmlns="" xmlns:xsd="http://www.w3.org/2001/XMLSchema" xmlns:msdata="urn:schemas-microsoft-com:xml-msdata">
    <xsd:import namespace="http://www.w3.org/XML/1998/namespace" />
    <xsd:element name="root" msdata:IsDataSet="true">
      <xsd:complexType>
        <xsd:choice maxOccurs="unbounded">
          <xsd:element name="metadata">
            <xsd:complexType>
              <xsd:sequence>
                <xsd:element name="value" type="xsd:string" minOccurs="0" />
              </xsd:sequence>
              <xsd:attribute name="name" use="required" type="xsd:string" />
              <xsd:attribute name="type" type="xsd:string" />
              <xsd:attribute name="mimetype" type="xsd:string" />
              <xsd:attribute ref="xml:space" />
            </xsd:complexType>
          </xsd:element>
          <xsd:element name="assembly">
            <xsd:complexType>
              <xsd:attribute name="alias" type="xsd:string" />
              <xsd:attribute name="name" type="xsd:string" />
            </xsd:complexType>
          </xsd:element>
          <xsd:element name="data">
            <xsd:complexType>
              <xsd:sequence>
                <xsd:element name="value" type="xsd:string" minOccurs="0" msdata:Ordinal="1" />
                <xsd:element name="comment" type="xsd:string" minOccurs="0" msdata:Ordinal="2" />
              </xsd:sequence>
              <xsd:attribute name="name" type="xsd:string" use="required" msdata:Ordinal="1" />
              <xsd:attribute name="type" type="xsd:string" msdata:Ordinal="3" />
              <xsd:attribute name="mimetype" type="xsd:string" msdata:Ordinal="4" />
              <xsd:attribute ref="xml:space" />
            </xsd:complexType>
          </xsd:element>
          <xsd:element name="resheader">
            <xsd:complexType>
              <xsd:sequence>
                <xsd:element name="value" type="xsd:string" minOccurs="0" msdata:Ordinal="1" />
              </xsd:sequence>
              <xsd:attribute name="name" type="xsd:string" use="required" />
            </xsd:complexType>
          </xsd:element>
        </xsd:choice>
      </xsd:complexType>
    </xsd:element>
  </xsd:schema>
  <resheader name="resmimetype">
    <value>text/microsoft-resx</value>
  </resheader>
  <resheader name="version">
    <value>2.0</value>
  </resheader>
  <resheader name="reader">
    <value>System.Resources.ResXResourceReader, System.Windows.Forms, Version=4.0.0.0, Culture=neutral, PublicKeyToken=b77a5c561934e089</value>
  </resheader>
  <resheader name="writer">
    <value>System.Resources.ResXResourceWriter, System.Windows.Forms, Version=4.0.0.0, Culture=neutral, PublicKeyToken=b77a5c561934e089</value>
  </resheader>
  <data name="InvalidPdbFormat" xml:space="preserve">
    <value>Invalid PDB format: {0}</value>
  </data>
  <data name="InvalidUserEntryPointInSourcePdb" xml:space="preserve">
    <value>Invalid user entry point in the source PDB</value>
  </data>
  <data name="MetadataNotAvailable" xml:space="preserve">
    <value>Metadata not available</value>
  </data>
  <data name="SpecifiedPEBuiltWithPortablePdb" xml:space="preserve">
    <value>Specified PE was built with Portable PDB</value>
  </data>
  <data name="SpecifiedPEFileHasNoAssociatedPdb" xml:space="preserve">
    <value>Specified PE file doesn't have any PDB associated with it</value>
  </data>
  <data name="StreamMustBeReadable" xml:space="preserve">
    <value>Stream must be readable</value>
  </data>
  <data name="StreamMustBeSeakable" xml:space="preserve">
    <value>Stream must be seakable</value>
  </data>
  <data name="StreamMustBeWritable" xml:space="preserve">
    <value>Stream must be writable</value>
  </data>
  <data name="MethodAssociatedWithLocalScopeHasNoBody" xml:space="preserve">
    <value>Method associated with local scope has no body</value>
  </data>
  <data name="MethodContainingLocalVariablesHasNoLocalSignature" xml:space="preserve">
    <value>Method containing local variables has no local signature</value>
  </data>
  <data name="LocalConstantNameTooLong" xml:space="preserve">
    <value>Local constant name too long</value>
  </data>
  <data name="LocalVariableNameTooLong" xml:space="preserve">
    <value>Local constant name too long</value>
  </data>
  <data name="ImportStringTooLong" xml:space="preserve">
    <value>Import string is too long. Ignoring the import: '{0}'</value>
  </data>
  <data name="LocalScopeRangesNestingIsInvalid" xml:space="preserve">
    <value>Local scope ranges nesting is invalid</value>
  </data>
  <data name="UnsupportedImportType" xml:space="preserve">
    <value>The type of import is not supported (type token {0:X8})</value>
  </data>
  <data name="UndefinedAssemblyReferenceAlias" xml:space="preserve">
    <value>An extern alias was not defined for assembly reference {0:X8}</value>
  </data>
  <data name="UnknownImportDefinitionKind" xml:space="preserve">
    <value>Unknown import definition kind: {0}</value>
  </data>
  <data name="DiagnosticLocation" xml:space="preserve">
    <value>token 0x{0:X8}</value>
  </data>
  <data name="ForwardedToUndefinedMethod" xml:space="preserve">
    <value>ForwardMethodInfo custom debug information forwards to non-existent method: 0x{0:X8}</value>
  </data>
  <data name="ForwardedToMethodWithNoScope" xml:space="preserve">
    <value>ForwardMethodInfo custom debug information forwards to a method with no scope: 0x{0:X8}</value>
  </data>
  <data name="BothForwardMethodInfoAndImportsSpecified" xml:space="preserve">
    <value>Both ForwardMethodInfo custom debug information and imports are specified</value>
  </data>
  <data name="InvalidStateMachineTypeName" xml:space="preserve">
    <value>Invalid type name specified in StateMachineTypeName custom debug information: {0}</value>
  </data>
  <data name="BothStateMachineTypeNameAndImportsSpecified" xml:space="preserve">
    <value>Both StateMachineTypeName custom debug information and imports are specified</value>
  </data>
  <data name="DuplicateDynamicLocals" xml:space="preserve">
    <value>Multiple DynamicLocals custom debug information records specified for the same local variable slot: {0}</value>
  </data>
  <data name="DuplicateTupleElementNamesForSlot" xml:space="preserve">
    <value>Multiple TupleElementNames custom debug information records specified for the same local variable slot: {0}</value>
  </data>
  <data name="DuplicateTupleElementNamesForConstant" xml:space="preserve">
    <value>Multiple TupleElementNames custom debug information records specified for the same local constant: '{0}' [{1}, {2})</value>
  </data>
  <data name="InvalidImportStringFormat" xml:space="preserve">
    <value>The format of import string is invalid: '{0}'</value>
  </data>
  <data name="InvalidEntryPointToken" xml:space="preserve">
    <value>The format of import string is invalid: '{0}'</value>
  </data>
  <data name="InvalidScopeILOffsetRange" xml:space="preserve">
    <value>Invalid scope IL offset range: [{0}, {1})</value>
  </data>
  <data name="InvalidLocalVariableData" xml:space="preserve">
    <value>Invalid local variable data</value>
  </data>
  <data name="InvalidLocalConstantData" xml:space="preserve">
    <value>Invalid local constant data</value>
  </data>
  <data name="InvalidLocalConstantSignature" xml:space="preserve">
    <value>Invalid local constant signature: '{0}'</value>
  </data>
  <data name="InvalidLocalScope" xml:space="preserve">
    <value>Invalid local scope</value>
  </data>
  <data name="InvalidSequencePointDocument" xml:space="preserve">
    <value>Invalid sequence point document name: '{0}'</value>
  </data>
  <data name="UnmappedDocumentName" xml:space="preserve">
    <value>Document name doesn't match any pattern in Source Link: '{0}'</value>
  </data>
  <data name="UriSchemeIsNotHttp" xml:space="preserve">
    <value>The scheme of URI specified in Source Link is not http/https: '{0}'</value>
  </data>
  <data name="NoSupportedUrisFoundInSourceLink" xml:space="preserve">
    <value>No supported URIs found in Source Link</value>
  </data>
  <data name="PdbNotMatchingDebugDirectory" xml:space="preserve">
    <value>The PDB doesn't match debug directory record in the PE file</value>
  </data>
  <data name="InvalidSourceLinkData" xml:space="preserve">
    <value>Invalid Source Link data</value>
  </data>
  <data name="InvalidSourceServerData" xml:space="preserve">
    <value>Invalid srcsrv data</value>
  </data>
  <data name="BothSourceLinkDataAndSourceServerData" xml:space="preserve">
    <value>PDB contains both Source Link and srcsrv data</value>
  </data>
  <data name="InvalidEmbeddedSource" xml:space="preserve">
    <value>Invalid embedded source associated with document '{0}'</value>
  </data>
  <data name="InconsistentStateMachineMethodMapping" xml:space="preserve">
    <value>Inconsistent state machine method mapping -- MoveNext method is associated with two distinct kickoff methods: 0x{0:X8} and 0x{1:X8}</value>
  </data>
</root>